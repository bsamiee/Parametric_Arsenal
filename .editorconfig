# EditorConfig for Parametric Arsenal
# Top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true

# C# files
[*.cs]
indent_style = space
indent_size = 4

# Nullable reference types - enable warnings for proper null safety
# Library code should be defensive with nullable annotations
dotnet_diagnostic.CS8600.severity = warning  # Converting null literal or possible null value to non-nullable type
dotnet_diagnostic.CS8602.severity = warning  # Dereference of a possibly null reference
dotnet_diagnostic.CS8603.severity = warning  # Possible null reference return
dotnet_diagnostic.CS8604.severity = warning  # Possible null reference argument

# SDK-specific naming convention exceptions
# Grasshopper SDK convention: 'DA' parameter (uppercase) for IGH_DataAccess in SolveInstance methods
# Rhino SDK convention: Various uppercase abbreviations in parameter names (e.g., 'UV', 'XYZ')
# Rationale: Breaking SDK conventions would confuse users and break compatibility with SDK examples
dotnet_diagnostic.IDE1006.severity = none
resharper_inconsistent_naming_highlighting = none

# Unused using directives - enforce code cleanliness
dotnet_diagnostic.IDE0005.severity = warning

# "Class is never used" warnings - suppress for library code
# Rationale: Libraries provide functionality that may not be consumed yet
dotnet_diagnostic.IDE0051.severity = none
dotnet_diagnostic.CA1812.severity = none

# Modern C# 12 style preferences - enforce best practices
csharp_prefer_braces = false:none                                           # Prefer no braces for single-line statements
csharp_style_pattern_matching_over_is_with_cast_check = true:warning        # Use pattern matching over is with cast
csharp_style_pattern_matching_over_as_with_null_check = true:warning        # Use 'is not' pattern instead of 'as' + null check
dotnet_style_prefer_collection_expression = true:warning                    # Use collection expressions [...] instead of new[]

# Strong typing preferences - explicit types enforced for clarity and maintainability
csharp_style_var_for_built_in_types = false:warning             # Never use var for built-in types (int, string, double, etc.)
csharp_style_var_when_type_is_apparent = false:warning          # Never use var even when type is obvious from right-hand side
csharp_style_var_elsewhere = false:warning                      # Never use var anywhere - always explicit types

# Code style enforcement
dotnet_diagnostic.IDE0011.severity = none        # Add braces - disabled, prefer braceless for single statements
dotnet_diagnostic.IDE0058.severity = none        # Expression value is never used
dotnet_diagnostic.IDE0290.severity = warning     # Use primary constructor

# SonarAnalyzer - Advanced code patterns
dotnet_diagnostic.S3358.severity = none          # Nested ternary operators - allowed for sophisticated functional patterns

# ===================================================================
# MODERN C# 12 / .NET 8 IDE RULES
# ===================================================================

# File-scoped namespaces (C# 10+)
dotnet_diagnostic.IDE0160.severity = warning     # Convert to file-scoped namespace
dotnet_diagnostic.IDE0161.severity = warning     # Convert to file-scoped namespace

# Collection expressions (C# 12)
dotnet_diagnostic.IDE0300.severity = warning     # Use collection expression for array
dotnet_diagnostic.IDE0301.severity = warning     # Use collection expression for empty
dotnet_diagnostic.IDE0302.severity = warning     # Use collection expression for stackalloc
dotnet_diagnostic.IDE0303.severity = warning     # Use collection expression for Create()
dotnet_diagnostic.IDE0304.severity = warning     # Use collection expression for builder
dotnet_diagnostic.IDE0305.severity = warning     # Use collection expression for fluent

# Primary constructors (C# 12) - configured above

# Pattern matching improvements
dotnet_diagnostic.IDE0170.severity = warning     # Simplify property pattern
dotnet_diagnostic.IDE0180.severity = warning     # Use tuple to swap values

# String interpolation improvements
dotnet_diagnostic.IDE0071.severity = warning     # Simplify interpolation
dotnet_diagnostic.IDE0072.severity = warning     # Add missing cases to switch expression

# Target-typed new expressions (C# 9+)
dotnet_diagnostic.IDE0090.severity = warning     # Simplify new expression

# Range operator (C# 8+)
dotnet_diagnostic.IDE0057.severity = warning     # Use range operator

# Switch expressions (C# 8+)
dotnet_diagnostic.IDE0010.severity = warning     # Add missing cases to switch statement

# Null-conditional operators
dotnet_diagnostic.IDE0031.severity = warning     # Use null propagation
dotnet_diagnostic.IDE0041.severity = warning     # Use is null check
dotnet_diagnostic.IDE0150.severity = warning     # Prefer null check over type check

# Object and collection initializers
dotnet_diagnostic.IDE0017.severity = warning     # Use object initializers
dotnet_diagnostic.IDE0028.severity = warning     # Use collection initializers

# Expression-bodied members
dotnet_diagnostic.IDE0021.severity = suggestion  # Use expression body for constructors
dotnet_diagnostic.IDE0022.severity = suggestion  # Use expression body for methods
dotnet_diagnostic.IDE0023.severity = suggestion  # Use expression body for conversion operators
dotnet_diagnostic.IDE0024.severity = suggestion  # Use expression body for operators
dotnet_diagnostic.IDE0025.severity = suggestion  # Use expression body for properties
dotnet_diagnostic.IDE0026.severity = suggestion  # Use expression body for indexers
dotnet_diagnostic.IDE0027.severity = suggestion  # Use expression body for accessors

# Using directives preferences
dotnet_diagnostic.IDE0065.severity = warning     # Using directive placement

# Language keyword preferences
dotnet_diagnostic.IDE0049.severity = warning     # Use language keywords instead of framework type names

# Parentheses preferences
dotnet_diagnostic.IDE0047.severity = none        # Remove unnecessary parentheses
dotnet_diagnostic.IDE0048.severity = warning     # Add parentheses for clarity

# Modifier preferences
dotnet_diagnostic.IDE0036.severity = warning     # Order modifiers
dotnet_diagnostic.IDE0040.severity = warning     # Add accessibility modifiers
dotnet_diagnostic.IDE0044.severity = warning     # Add readonly modifier

# this. preferences
dotnet_diagnostic.IDE0003.severity = none        # Remove this or Me qualification
dotnet_diagnostic.IDE0009.severity = none        # Add this or Me qualification

# ===================================================================
# ENHANCED RESHARPER INTEGRATION
# ===================================================================

# Variable declaration preferences
resharper_use_var_when_declaring_local_variable_severity = suggestion
resharper_for_built_in_types = use_explicit_type
resharper_for_simple_types = use_explicit_type
resharper_for_other_types = use_explicit_type

# Code arrangement and formatting
resharper_arrange_redundant_parentheses_highlighting = warning
resharper_arrange_this_qualifier_highlighting = hint
resharper_arrange_type_member_modifiers_highlighting = warning
resharper_arrange_type_modifiers_highlighting = warning
resharper_arrange_method_or_operator_body = suggestion
resharper_arrange_constructor_or_destructor_body = suggestion

# Null checking and safety
resharper_arrange_null_checking_pattern_highlighting = warning
resharper_convert_to_null_coalescing_compound_assignment_highlighting = warning
resharper_convert_null_coalescing_to_conditional_expression_highlighting = none

# Pattern matching
resharper_arrange_switch_expression_highlighting = warning
resharper_convert_switch_statement_to_expression_highlighting = warning
resharper_invert_if_highlighting = none

# String formatting and interpolation
resharper_arrange_string_interpolation_highlighting = warning
resharper_use_string_interpolation_highlighting = warning

# Collection and LINQ preferences
resharper_foreach_can_be_converted_to_query_using_another_get_enumerator_highlighting = none
resharper_foreach_can_be_partly_converted_to_query_using_another_get_enumerator_highlighting = none
resharper_loop_can_be_converted_to_query_highlighting = none
resharper_merge_sequential_checks_highlighting = warning

# Performance optimizations
resharper_merge_cast_with_type_check_highlighting = warning
resharper_unnecessary_whitespace_highlighting = warning
resharper_redundant_base_qualifier_highlighting = warning
resharper_redundant_explicit_array_creation_highlighting = warning

# Code quality inspections
resharper_suggest_var_or_type_built_in_types = use_explicit_type
resharper_suggest_var_or_type_simple_types = use_explicit_type
resharper_suggest_var_or_type_elsewhere = use_explicit_type
resharper_enforce_do_while_statement_braces = false
resharper_enforce_fixed_statement_braces = false
resharper_enforce_foreach_statement_braces = false
resharper_enforce_for_statement_braces = false
resharper_enforce_if_statement_braces = false
resharper_enforce_lock_statement_braces = false
resharper_enforce_using_statement_braces = false
resharper_enforce_while_statement_braces = false

# Access modifier preferences
resharper_redundant_default_member_initializer_highlighting = suggestion
resharper_class_never_instantiated_global_highlighting = hint
resharper_class_never_instantiated_local_highlighting = hint

# Async/await preferences
resharper_consider_using_config_await_highlighting = none
resharper_async_void_method_highlighting = warning

# ===================================================================
# SOLID PRINCIPLES & DESIGN RULES
# ===================================================================

# Single Responsibility Principle (SRP)
dotnet_diagnostic.CA1501.severity = warning      # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = warning      # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = warning      # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = warning      # Avoid excessive class coupling

# Open/Closed Principle (OCP)
dotnet_diagnostic.CA1852.severity = warning      # Seal internal types
dotnet_diagnostic.CA1000.severity = warning      # Do not declare static members on generic types

# Liskov Substitution Principle (LSP)
dotnet_diagnostic.CA1012.severity = warning      # Abstract types should not have public constructors
dotnet_diagnostic.CA1720.severity = warning      # Identifiers should not contain type names

# Interface Segregation Principle (ISP)
dotnet_diagnostic.CA1010.severity = warning      # Collections should implement generic interface
dotnet_diagnostic.CA1040.severity = warning      # Avoid empty interfaces
dotnet_diagnostic.CA1034.severity = none         # Nested types should not be visible - allow for tightly-coupled value types like Result<T>.ErrorInfo

# Dependency Inversion Principle (DIP)
dotnet_diagnostic.CA1050.severity = error        # Declare types in namespaces (required for proper organization)
dotnet_diagnostic.CA1062.severity = none         # Validate arguments - we do defensive null checks manually with ArgumentNullException.ThrowIfNull
dotnet_diagnostic.CA1710.severity = warning     # Identifiers should have correct suffix

# ===================================================================
# PERFORMANCE OPTIMIZATION RULES
# ===================================================================

# Memory and allocation optimization
dotnet_diagnostic.CA1822.severity = warning      # Mark members as static
dotnet_diagnostic.CA1825.severity = warning      # Avoid zero-length array allocations
dotnet_diagnostic.CA1826.severity = warning      # Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1827.severity = warning      # Do not use Count/LongCount when Any can be used
dotnet_diagnostic.CA1828.severity = warning      # Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1829.severity = warning      # Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1830.severity = warning      # Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1831.severity = warning      # Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1832.severity = warning      # Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1833.severity = warning      # Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1834.severity = warning      # Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1835.severity = warning      # Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1836.severity = warning      # Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1837.severity = warning      # Use Environment.ProcessId instead of Process.GetCurrentProcess().Id
dotnet_diagnostic.CA1838.severity = warning      # Avoid StringBuilder parameters for P/Invokes
dotnet_diagnostic.CA1839.severity = warning      # Use Environment.ProcessPath instead of Process.GetCurrentProcess().MainModule.FileName
dotnet_diagnostic.CA1840.severity = warning      # Use Environment.CurrentManagedThreadId instead of Thread.CurrentThread.ManagedThreadId
dotnet_diagnostic.CA1841.severity = warning      # Prefer Dictionary Contains methods
dotnet_diagnostic.CA1842.severity = warning      # Do not use WhenAll with a single task
dotnet_diagnostic.CA1843.severity = warning      # Do not use WhenAny with a single task
dotnet_diagnostic.CA1844.severity = warning      # Provide memory-based overrides of async methods when subclassing Stream
dotnet_diagnostic.CA1845.severity = warning      # Use span-based string.Concat
dotnet_diagnostic.CA1846.severity = warning      # Prefer AsSpan over Substring
dotnet_diagnostic.CA1847.severity = warning      # Use string.Contains(char) instead of string.Contains(string) with single characters
dotnet_diagnostic.CA1848.severity = warning      # Use the LoggerMessage delegates
dotnet_diagnostic.CA1849.severity = warning      # Call async methods when in an async method
dotnet_diagnostic.CA1850.severity = warning      # Prefer static HashData method over ComputeHash
dotnet_diagnostic.CA1851.severity = warning      # Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1853.severity = warning      # Unnecessary call to Dictionary.ContainsKey(key)
dotnet_diagnostic.CA1854.severity = warning      # Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1855.severity = warning      # Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1856.severity = warning      # Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1857.severity = warning      # Use ConstantExpected attribute for parameters
dotnet_diagnostic.CA1858.severity = warning      # Use StartsWith instead of IndexOf
dotnet_diagnostic.CA1859.severity = warning      # Use concrete types when possible for improved performance
dotnet_diagnostic.CA1860.severity = warning      # Avoid using Enumerable.Any() extension method
dotnet_diagnostic.CA1861.severity = warning      # Avoid constant arrays as arguments
dotnet_diagnostic.CA1862.severity = warning      # Use the StringComparison method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1863.severity = warning      # Use composite format
dotnet_diagnostic.CA1864.severity = warning      # Prefer the IDictionary.TryAdd(TKey, TValue) method
dotnet_diagnostic.CA1865.severity = warning      # Use char overload
dotnet_diagnostic.CA1866.severity = warning      # Use char overload
dotnet_diagnostic.CA1867.severity = warning      # Use char overload
dotnet_diagnostic.CA1868.severity = warning      # Unnecessary call to Contains for sets
dotnet_diagnostic.CA1869.severity = warning      # Cache and reuse JsonSerializerOptions instances
dotnet_diagnostic.CA1870.severity = warning      # Use a cached SearchValues instance

# ===================================================================
# SECURITY RULES
# ===================================================================

# Resource management and disposal
dotnet_diagnostic.CA2000.severity = warning      # Dispose objects before losing scope
dotnet_diagnostic.CA2002.severity = warning      # Do not lock on objects with weak identity
dotnet_diagnostic.CA2008.severity = warning      # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning      # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = warning      # Do not assign property within its setter
dotnet_diagnostic.CA2012.severity = warning      # Use ValueTasks correctly
dotnet_diagnostic.CA2013.severity = warning      # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = warning      # Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity = warning      # Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2016.severity = warning      # Forward the CancellationToken parameter to methods
dotnet_diagnostic.CA2017.severity = warning      # Parameter count mismatch
dotnet_diagnostic.CA2018.severity = warning      # Buffer.BlockCopy argument validation
dotnet_diagnostic.CA2019.severity = warning      # ThreadStatic fields should not use inline initialization
dotnet_diagnostic.CA2020.severity = warning      # Prevent from behavioral change

# Cryptography and security
dotnet_diagnostic.CA5350.severity = error        # Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = error        # Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5385.severity = error        # Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size
dotnet_diagnostic.CA5397.severity = error        # Do not use deprecated SslProtocols values

# Injection vulnerabilities
dotnet_diagnostic.CA3001.severity = warning      # Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3002.severity = warning      # Review code for XSS vulnerabilities
dotnet_diagnostic.CA3003.severity = warning      # Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3004.severity = warning      # Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3005.severity = warning      # Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning      # Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3007.severity = warning      # Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3008.severity = warning      # Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning      # Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning      # Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning      # Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning      # Review code for regex injection vulnerabilities

# ===================================================================
# CODE QUALITY & MAINTAINABILITY
# ===================================================================

dotnet_diagnostic.CA1031.severity = none         # Catch general exceptions - intentional for error handling pattern
dotnet_diagnostic.CA2007.severity = none         # ConfigureAwait - not needed for library code

# Formatting
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Modern C# features - enforce C# 12 / .NET 8 best practices
csharp_prefer_simple_using_statement = true:warning
csharp_style_namespace_declarations = file_scoped:warning                  # Enforce file-scoped namespaces to reduce indentation
csharp_style_prefer_method_group_conversion = true:warning
csharp_style_prefer_top_level_statements = false:suggestion
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_accessors = true:warning

# Naming conventions
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles
dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case
